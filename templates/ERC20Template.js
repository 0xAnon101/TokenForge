// ERC20Template.js

const generateImports = (addMintFunction, addPausable) => {
  const imports = ['import "@openzeppelin/contracts/token/ERC20/ERC20.sol";'];
  if (addMintFunction.toLowerCase() == "y") {
    imports.push('import "@openzeppelin/contracts/access/Ownable.sol";');
  }
  if (addPausable.toLowerCase() == "y") {
    imports.push('import "@openzeppelin/contracts/security/Pausable.sol";');
  }
  return imports.join("\n");
};

const generateOwnable = (addMintFunction) => {
  return addMintFunction.toLowerCase() === "y" ? ", Ownable" : "";
};

const generatePausable = (addPausable) => {
  return addPausable.toLowerCase() === "y" ? ", Pausable" : "";
};

const generateMintFunction = (addMintFunction) => {
  return addMintFunction.toLowerCase() === "y"
    ? `
    function mint(address to, uint256 amount) public onlyOwner {
      _mint(to, amount);
    }`
    : "";
};

const generatePausableFunction = (addPausable) => {
  return addPausable.toLowerCase() === "y"
    ? `
    function pause() public onlyOwner {
      _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        whenNotPaused
        override
    {
        super._beforeTokenTransfer(from, to, amount);
    }`
    : "";
};

module.exports = (options) => {
  const { ERC20Name, ERC20Symbol, totalSupply, addMintFunction, addPausable } =
    options;

  const imports = generateImports(addMintFunction, addPausable);
  const ERC20Ownable = generateOwnable(addMintFunction);
  const ERC20Pausable = generatePausable(addPausable);
  const mintFunction = generateMintFunction(addMintFunction);
  const pausableFunction = generatePausableFunction(addPausable);

  return `
  // SPDX-License-Identifier: MIT
  // Auto-generated by TokenForge

  pragma solidity ^0.8.0;
  ${imports}

  contract ${ERC20Name} is ERC20${ERC20Ownable}${ERC20Pausable} {
    string public _name = "${ERC20Name}";
    string public _symbol = "${ERC20Symbol}";
    uint256 public _totalSupply = ${totalSupply};

    constructor() ERC20(_name, _symbol) {
      _mint(msg.sender, _totalSupply * 10 ** decimals()); // Give the msg.sender all the tokens
    }

    ${mintFunction}

    ${pausableFunction}
  }
  `;
};

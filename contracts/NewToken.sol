// SPDX-License-Identifier: MIT
// Auto-generated by ERC20 CLI: ERCGEN

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

contract NewToken is ERC20, Ownable, Pausable {
    string public _name = "NewToken";
    string public _symbol = "NTN";
    uint256 public _totalSupply = 1000000000;

    constructor() ERC20(_name, _symbol) {
        _mint(msg.sender, _totalSupply * 10**decimals()); // Give the msg.sender all the tokens
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
    }
}
